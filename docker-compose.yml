version: '3.9'

services:
  server:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - $ENV
    environment:
      - REDIS_OM_URL=${NN_REDIS_OM_URL}
      - C_FORCE_ROOT=1
    expose:
      - $NN_SERVER_PORT
    volumes:
      - .:/app
    command: >
      sh -c "cd /app/src
      && python -m uvicorn notifications:app --reload --host 0.0.0.0 --port $NN_SERVER_PORT"
    depends_on:
      redis-primary:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notifications_api.rule=Host(`api-notifications.localhost`,`traefik`)"
      - "traefik.http.routers.notifications_api.entrypoints=web"

  db:
    image: postgres:14.2-alpine
    environment:
      - POSTGRES_USER=${NN_DB_USER}
      - POSTGRES_PASSWORD=${NN_DB_PASSWORD}
      - POSTGRES_DB=${NN_DB_NAME}
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready -d $NN_DB_NAME -U $NN_DB_USER
      interval: 5s
      timeout: 5s
      retries: 5

  redis-celery:
    image: redis:7.0-alpine
    volumes:
      - redis_celery_data:/data
    healthcheck:
      test: redis-cli -p 6379 ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 5

  redis-primary:
    image: redis/redis-stack:7.0.0-RC5
    ports:
      - "13334:8001"
    volumes:
      - redis_primary_data:/data
    healthcheck:
      test: redis-cli -p 6379 ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 5

  celery:
    restart: always
    env_file:
      - ${ENV}
    environment:
      - REDIS_OM_URL=${NN_REDIS_OM_URL}
      - C_FORCE_ROOT=1
    build: .
    command: >
      bash -c "cd /app/src/
      && celery -A notifications.celery_app worker -Q default,celery,emails,urgent_notifications -l info -c 2 -n default_worker"
    volumes:
      - .:/app
    healthcheck:
      test: cd /app/src && celery -A notifications.celery_app inspect ping
      interval: 10s
      timeout: 10s
      retries: 3
    links:
      - redis-celery
    depends_on:
      redis-celery:
        condition: service_healthy
      server:
        condition: service_started

  celery_high_priority:
    build: .
    restart: always
    env_file:
      - ${ENV}
    environment:
      - REDIS_OM_URL=${NN_REDIS_OM_URL}
      - C_FORCE_ROOT=1
    command: >
      bash -c "cd /app/src/
      && celery -A notifications.celery_app worker -Q urgent_notifications -l info -c 1 -n high_priority"
    volumes:
      - .:/app
    healthcheck:
      test: cd /app/src && celery -A notifications.celery_app inspect ping
      interval: 10s
      timeout: 10s
      retries: 3
    links:
      - redis-celery
    depends_on:
      redis-celery:
        condition: service_healthy
      server:
        condition: service_started

  celery_low_priority:
    build: .
    restart: always
    env_file:
      - ${ENV}
    environment:
      - REDIS_OM_URL=${NN_REDIS_OM_URL}
      - C_FORCE_ROOT=1
    command: >
      bash -c "cd /app/src/
      && celery -A notifications.celery_app worker -Q emails,urgent_notifications -l info -c 1 -n low_priority"
    volumes:
      - .:/app
    healthcheck:
      test: cd /app/src && celery -A notifications.celery_app inspect ping
      interval: 10s
      timeout: 10s
      retries: 3
    links:
      - redis-celery
    depends_on:
      redis-celery:
        condition: service_healthy
      server:
        condition: service_started

  celery_beat:
    restart: on-failure
    env_file:
      - ${ENV}
    environment:
      - REDIS_OM_URL=${NN_REDIS_OM_URL}
      - C_FORCE_ROOT=1
    build: .
    volumes:
      - .:/app
    command: >
      bash -c "cd /app/src/
      && celery -A notifications.celery_app beat -l info --pidfile= --scheduler celery_sqlalchemy_scheduler.schedulers:DatabaseScheduler"
    depends_on:
      redis-celery:
        condition: service_healthy
      db:
        condition: service_healthy
      server:
        condition: service_started

  flower:
    image: mher/flower:0.9.5
    restart: unless-stopped
    env_file:
      - ${ENV}
    command: celery flower --broker=${NN_CELERY_BROKER_URL} --port=${NN_FLOWER_PORT}
    ports:
      - "8888:${NN_FLOWER_PORT}"
    depends_on:
      celery:
        condition: service_healthy
      redis-celery:
        condition: service_healthy

  traefik:
    image: traefik:v2.8
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingParam=0"
      - "--tracing.jaeger.traceContextHeaderName=X-Request-Id"
    ports:
      - "8011:80"
      - "8084:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      - server

volumes:
  postgres_data:
  redis_primary_data:
  redis_celery_data:
